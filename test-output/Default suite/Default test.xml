<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="jainish" failures="0" tests="22" name="Default test" time="7.83" errors="0" timestamp="2023-09-01T16:33:12 IST">
  <testcase classname="com.Main.Main2" name="@BeforeClass configureAppium" time="7.613">
    <failure type="org.openqa.selenium.SessionNotCreatedException" message="Could not start a new session. Response code 500. Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up 
Host info: host: &amp;apos;JAINISH&amp;apos;, ip: &amp;apos;192.168.1.119&amp;apos;
Build info: version: &amp;apos;4.11.0&amp;apos;, revision: &amp;apos;040bc5406b&amp;apos;
System info: os.name: &amp;apos;Windows 11&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.8&amp;apos;
Driver info: io.appium.java_client.android.AndroidDriver
Command: [null, newSession {capabilities=[{appium:deviceName=sahil3, platformName=ANDROID, appium:automationName=UIAutomator2, appium:app=D:\sahil_learn\apk file-20230711T054826Z-001\apk file\ApiDemos-debug.apk}], desiredCapabilities=Capabilities {appium:app: D:\sahil_learn\apk file-202..., appium:automationName: UIAutomator2, appium:deviceName: sahil3, platformName: ANDROID}}]
Capabilities {appium:app: D:\sahil_learn\apk file-202..., appium:automationName: UIAutomator2, appium:deviceName: sahil3, platformName: ANDROID}">
      <![CDATA[org.openqa.selenium.SessionNotCreatedException: Could not start a new session. Response code 500. Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up 
Host info: host: 'JAINISH', ip: '192.168.1.119'
Build info: version: '4.11.0', revision: '040bc5406b'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.8'
Driver info: io.appium.java_client.android.AndroidDriver
Command: [null, newSession {capabilities=[{appium:deviceName=sahil3, platformName=ANDROID, appium:automationName=UIAutomator2, appium:app=D:\sahil_learn\apk file-20230711T054826Z-001\apk file\ApiDemos-debug.apk}], desiredCapabilities=Capabilities {appium:app: D:\sahil_learn\apk file-202..., appium:automationName: UIAutomator2, appium:deviceName: sahil3, platformName: ANDROID}}]
Capabilities {appium:app: D:\sahil_learn\apk file-202..., appium:automationName: UIAutomator2, appium:deviceName: sahil3, platformName: ANDROID}
at org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:140)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at io.appium.java_client.remote.AppiumProtocolHandshake.createSession(AppiumProtocolHandshake.java:133)
at io.appium.java_client.remote.AppiumProtocolHandshake.createSession(AppiumProtocolHandshake.java:102)
at io.appium.java_client.remote.AppiumCommandExecutor.createSession(AppiumCommandExecutor.java:194)
at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:262)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at io.appium.java_client.AppiumDriver.startSession(AppiumDriver.java:229)
at org.openqa.selenium.remote.RemoteWebDriver.<init>(RemoteWebDriver.java:159)
at io.appium.java_client.AppiumDriver.<init>(AppiumDriver.java:80)
at io.appium.java_client.AppiumDriver.<init>(AppiumDriver.java:92)
at io.appium.java_client.android.AndroidDriver.<init>(AndroidDriver.java:117)
at com.Main.Main2.configureAppium(Main2.java:90)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:180)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:122)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- @BeforeClass configureAppium -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="@AfterMethod tearDown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase classname="com.Main.Main2" name="Animationn" time="0.0">
    <skipped/>
  </testcase> <!-- Animationn -->
  <testcase classname="com.Main.Main2" name="autoComplete" time="0.0">
    <skipped/>
  </testcase> <!-- autoComplete -->
  <testcase classname="com.Main.Main2" name="chrono" time="0.0">
    <skipped/>
  </testcase> <!-- chrono -->
  <testcase classname="com.Main.Main2" name="contrl" time="0.0">
    <skipped/>
  </testcase> <!-- contrl -->
  <testcase classname="com.Main.Main2" name="date" time="0.0">
    <skipped/>
  </testcase> <!-- date -->
  <testcase classname="com.Main.Main2" name="dragDrop" time="0.0">
    <skipped/>
  </testcase> <!-- dragDrop -->
  <testcase classname="com.Main.Main2" name="List" time="0.0">
    <skipped/>
  </testcase> <!-- List -->
  <testcase classname="com.Main.Main2" name="gallerys" time="0.0">
    <skipped/>
  </testcase> <!-- gallerys -->
  <testcase classname="com.Main.Main2" name="grid" time="0.0">
    <skipped/>
  </testcase> <!-- grid -->
  <testcase classname="com.Main.Main2" name="image" time="0.0">
    <skipped/>
  </testcase> <!-- image -->
  <testcase classname="com.Main.Main2" name="layoutAnimation" time="0.0">
    <skipped/>
  </testcase> <!-- layoutAnimation -->
  <testcase classname="com.Main.Main2" name="layout" time="0.0">
    <skipped/>
  </testcase> <!-- layout -->
  <testcase classname="com.Main.Main2" name="pickerr" time="0.0">
    <skipped/>
  </testcase> <!-- pickerr -->
  <testcase classname="com.Main.Main2" name="popup" time="0.0">
    <skipped/>
  </testcase> <!-- popup -->
  <testcase classname="com.Main.Main2" name="Progress" time="0.0">
    <skipped/>
  </testcase> <!-- Progress -->
  <testcase classname="com.Main.Main2" name="radio" time="0.0">
    <skipped/>
  </testcase> <!-- radio -->
  <testcase classname="com.Main.Main2" name="bar" time="0.0">
    <skipped/>
  </testcase> <!-- bar -->
  <testcase classname="com.Main.Main2" name="button" time="0.0">
    <skipped/>
  </testcase> <!-- button -->
  <testcase classname="com.Main.Main2" name="search" time="0.0">
    <skipped/>
  </testcase> <!-- search -->
  <testcase classname="com.Main.Main2" name="secure" time="0.0">
    <skipped/>
  </testcase> <!-- secure -->
  <testcase classname="com.Main.Main2" name="seek" time="0.0">
    <skipped/>
  </testcase> <!-- seek -->
  <testcase classname="com.Main.Main2" name="switcher" time="0.0">
    <skipped/>
  </testcase> <!-- switcher -->
</testsuite> <!-- Default test -->
